/*
 * Gestão de Propostas
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AlteracaoPropostaRequest;
import io.swagger.client.model.CpfDocumentoProposta;
import io.swagger.client.model.DocumentoProposta;
import io.swagger.client.model.Historico;
import io.swagger.client.model.InclusaoPropostaResponse;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.Oferta;
import io.swagger.client.model.Pendencia;
import io.swagger.client.model.Proposta;
import io.swagger.client.model.PropostaResponse;
import io.swagger.client.model.StatusPropostaResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropostaApi {
    private ApiClient apiClient;

    public PropostaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropostaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for propostasGet
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param cpf Cpf utilizado na proposta. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasGetCall(String clientId, String accessToken, byte[] xAuthorization, String cpf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasGetValidateBeforeCall(String clientId, String accessToken, byte[] xAuthorization, String cpf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasGet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasGet(Async)");
        }
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling propostasGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasGetCall(clientId, accessToken, xAuthorization, cpf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Recuperação da lista de propostas vinculadas a um CPF.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param cpf Cpf utilizado na proposta. (required)
     * @return List&lt;PropostaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PropostaResponse> propostasGet(String clientId, String accessToken, byte[] xAuthorization, String cpf) throws ApiException {
        ApiResponse<List<PropostaResponse>> resp = propostasGetWithHttpInfo(clientId, accessToken, xAuthorization, cpf);
        return resp.getData();
    }

    /**
     * 
     * Recuperação da lista de propostas vinculadas a um CPF.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param cpf Cpf utilizado na proposta. (required)
     * @return ApiResponse&lt;List&lt;PropostaResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PropostaResponse>> propostasGetWithHttpInfo(String clientId, String accessToken, byte[] xAuthorization, String cpf) throws ApiException {
        com.squareup.okhttp.Call call = propostasGetValidateBeforeCall(clientId, accessToken, xAuthorization, cpf, null, null);
        Type localVarReturnType = new TypeToken<List<PropostaResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recuperação da lista de propostas vinculadas a um CPF.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param cpf Cpf utilizado na proposta. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasGetAsync(String clientId, String accessToken, byte[] xAuthorization, String cpf, final ApiCallback<List<PropostaResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasGetValidateBeforeCall(clientId, accessToken, xAuthorization, cpf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PropostaResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasIdClientesDocumentosPost
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param documentacao CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdClientesDocumentosPostCall(String id, String clientId, String accessToken, CpfDocumentoProposta documentacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentacao;

        // create path and map variables
        String localVarPath = "/propostas/{id}/clientes/documentos"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdClientesDocumentosPostValidateBeforeCall(String id, String clientId, String accessToken, CpfDocumentoProposta documentacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdClientesDocumentosPost(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdClientesDocumentosPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdClientesDocumentosPost(Async)");
        }
        
        // verify the required parameter 'documentacao' is set
        if (documentacao == null) {
            throw new ApiException("Missing the required parameter 'documentacao' when calling propostasIdClientesDocumentosPost(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdClientesDocumentosPostCall(id, clientId, accessToken, documentacao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param documentacao CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void propostasIdClientesDocumentosPost(String id, String clientId, String accessToken, CpfDocumentoProposta documentacao) throws ApiException {
        propostasIdClientesDocumentosPostWithHttpInfo(id, clientId, accessToken, documentacao);
    }

    /**
     * 
     * Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param documentacao CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> propostasIdClientesDocumentosPostWithHttpInfo(String id, String clientId, String accessToken, CpfDocumentoProposta documentacao) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdClientesDocumentosPostValidateBeforeCall(id, clientId, accessToken, documentacao, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param documentacao CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdClientesDocumentosPostAsync(String id, String clientId, String accessToken, CpfDocumentoProposta documentacao, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdClientesDocumentosPostValidateBeforeCall(id, clientId, accessToken, documentacao, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for propostasIdDocUploadUrlGet
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdDocUploadUrlGetCall(String id, String clientId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas/{id}/doc-upload-url"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdDocUploadUrlGetValidateBeforeCall(String id, String clientId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdDocUploadUrlGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdDocUploadUrlGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdDocUploadUrlGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdDocUploadUrlGetCall(id, clientId, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 propostasIdDocUploadUrlGet(String id, String clientId, String accessToken) throws ApiException {
        ApiResponse<InlineResponse200> resp = propostasIdDocUploadUrlGetWithHttpInfo(id, clientId, accessToken);
        return resp.getData();
    }

    /**
     * 
     * Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> propostasIdDocUploadUrlGetWithHttpInfo(String id, String clientId, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdDocUploadUrlGetValidateBeforeCall(id, clientId, accessToken, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdDocUploadUrlGetAsync(String id, String clientId, String accessToken, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdDocUploadUrlGetValidateBeforeCall(id, clientId, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasIdDocumentosGet
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param tipoDocumento Tipo do documento. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdDocumentosGetCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String tipoDocumento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas/{id}/documentos"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tipoDocumento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tipoDocumento", tipoDocumento));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdDocumentosGetValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String tipoDocumento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdDocumentosGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdDocumentosGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdDocumentosGet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdDocumentosGet(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdDocumentosGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdDocumentosGet(Async)");
        }
        
        // verify the required parameter 'tipoDocumento' is set
        if (tipoDocumento == null) {
            throw new ApiException("Missing the required parameter 'tipoDocumento' when calling propostasIdDocumentosGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdDocumentosGetCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param tipoDocumento Tipo do documento. (required)
     * @return List&lt;DocumentoProposta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DocumentoProposta> propostasIdDocumentosGet(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String tipoDocumento) throws ApiException {
        ApiResponse<List<DocumentoProposta>> resp = propostasIdDocumentosGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento);
        return resp.getData();
    }

    /**
     * 
     * Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param tipoDocumento Tipo do documento. (required)
     * @return ApiResponse&lt;List&lt;DocumentoProposta&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DocumentoProposta>> propostasIdDocumentosGetWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String tipoDocumento) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdDocumentosGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento, null, null);
        Type localVarReturnType = new TypeToken<List<DocumentoProposta>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param tipoDocumento Tipo do documento. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdDocumentosGetAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String tipoDocumento, final ApiCallback<List<DocumentoProposta>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdDocumentosGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DocumentoProposta>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasIdGet
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdGetCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdGetValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdGet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdGet(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdGetCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return Proposta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Proposta propostasIdGet(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        ApiResponse<Proposta> resp = propostasIdGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
        return resp.getData();
    }

    /**
     * 
     * Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return ApiResponse&lt;Proposta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Proposta> propostasIdGetWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, null, null);
        Type localVarReturnType = new TypeToken<Proposta>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdGetAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ApiCallback<Proposta> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Proposta>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasIdHistoricosGet
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdHistoricosGetCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas/{id}/historicos"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdHistoricosGetValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdHistoricosGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdHistoricosGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdHistoricosGet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdHistoricosGet(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdHistoricosGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdHistoricosGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdHistoricosGetCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Recuperação do histórico de atividades realizadas em uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return List&lt;Historico&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Historico> propostasIdHistoricosGet(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        ApiResponse<List<Historico>> resp = propostasIdHistoricosGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
        return resp.getData();
    }

    /**
     * 
     * Recuperação do histórico de atividades realizadas em uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return ApiResponse&lt;List&lt;Historico&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Historico>> propostasIdHistoricosGetWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdHistoricosGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, null, null);
        Type localVarReturnType = new TypeToken<List<Historico>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recuperação do histórico de atividades realizadas em uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdHistoricosGetAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ApiCallback<List<Historico>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdHistoricosGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Historico>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasIdMensagensPost
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param mensagem Mensagem. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdMensagensPostCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String mensagem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mensagem;

        // create path and map variables
        String localVarPath = "/propostas/{id}/mensagens"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdMensagensPostValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String mensagem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdMensagensPost(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdMensagensPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdMensagensPost(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdMensagensPost(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdMensagensPost(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdMensagensPost(Async)");
        }
        
        // verify the required parameter 'mensagem' is set
        if (mensagem == null) {
            throw new ApiException("Missing the required parameter 'mensagem' when calling propostasIdMensagensPost(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdMensagensPostCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Envio de mensagens para a mesa sobre a proposta em análise.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param mensagem Mensagem. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void propostasIdMensagensPost(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String mensagem) throws ApiException {
        propostasIdMensagensPostWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem);
    }

    /**
     * 
     * Envio de mensagens para a mesa sobre a proposta em análise.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param mensagem Mensagem. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> propostasIdMensagensPostWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String mensagem) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdMensagensPostValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Envio de mensagens para a mesa sobre a proposta em análise.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param mensagem Mensagem. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdMensagensPostAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String mensagem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdMensagensPostValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for propostasIdOfertasGet
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdOfertasGetCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas/{id}/ofertas"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdOfertasGetValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdOfertasGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdOfertasGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdOfertasGet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdOfertasGet(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdOfertasGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdOfertasGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdOfertasGetCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return List&lt;Oferta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Oferta> propostasIdOfertasGet(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        ApiResponse<List<Oferta>> resp = propostasIdOfertasGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
        return resp.getData();
    }

    /**
     * 
     * Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return ApiResponse&lt;List&lt;Oferta&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Oferta>> propostasIdOfertasGetWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdOfertasGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, null, null);
        Type localVarReturnType = new TypeToken<List<Oferta>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdOfertasGetAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ApiCallback<List<Oferta>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdOfertasGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Oferta>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasIdOfertasPost
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param idOferta Identificador da oferta. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdOfertasPostCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String idOferta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = idOferta;

        // create path and map variables
        String localVarPath = "/propostas/{id}/ofertas"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdOfertasPostValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String idOferta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdOfertasPost(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdOfertasPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdOfertasPost(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdOfertasPost(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdOfertasPost(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdOfertasPost(Async)");
        }
        
        // verify the required parameter 'idOferta' is set
        if (idOferta == null) {
            throw new ApiException("Missing the required parameter 'idOferta' when calling propostasIdOfertasPost(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdOfertasPostCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Associa uma oferta a uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param idOferta Identificador da oferta. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void propostasIdOfertasPost(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String idOferta) throws ApiException {
        propostasIdOfertasPostWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta);
    }

    /**
     * 
     * Associa uma oferta a uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param idOferta Identificador da oferta. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> propostasIdOfertasPostWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String idOferta) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdOfertasPostValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Associa uma oferta a uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param idOferta Identificador da oferta. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdOfertasPostAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, String idOferta, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdOfertasPostValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for propostasIdPendenciasGet
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdPendenciasGetCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas/{id}/pendencias"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdPendenciasGetValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdPendenciasGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdPendenciasGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdPendenciasGet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdPendenciasGet(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdPendenciasGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdPendenciasGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdPendenciasGetCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Recuperação da lista de pendências de uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return List&lt;Pendencia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Pendencia> propostasIdPendenciasGet(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        ApiResponse<List<Pendencia>> resp = propostasIdPendenciasGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
        return resp.getData();
    }

    /**
     * 
     * Recuperação da lista de pendências de uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return ApiResponse&lt;List&lt;Pendencia&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Pendencia>> propostasIdPendenciasGetWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdPendenciasGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, null, null);
        Type localVarReturnType = new TypeToken<List<Pendencia>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recuperação da lista de pendências de uma proposta.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdPendenciasGetAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ApiCallback<List<Pendencia>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdPendenciasGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Pendencia>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasIdPut
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param alteracaoPropostaRequest Proposta a ser alterada. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdPutCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = alteracaoPropostaRequest;

        // create path and map variables
        String localVarPath = "/propostas/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdPutValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdPut(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdPut(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdPut(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdPut(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdPut(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdPut(Async)");
        }
        
        // verify the required parameter 'alteracaoPropostaRequest' is set
        if (alteracaoPropostaRequest == null) {
            throw new ApiException("Missing the required parameter 'alteracaoPropostaRequest' when calling propostasIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdPutCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param alteracaoPropostaRequest Proposta a ser alterada. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void propostasIdPut(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest) throws ApiException {
        propostasIdPutWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest);
    }

    /**
     * 
     * Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param alteracaoPropostaRequest Proposta a ser alterada. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> propostasIdPutWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdPutValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param alteracaoPropostaRequest Proposta a ser alterada. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdPutAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdPutValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for propostasIdStatusGet
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasIdStatusGetCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propostas/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasIdStatusGetValidateBeforeCall(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propostasIdStatusGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasIdStatusGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasIdStatusGet(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasIdStatusGet(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasIdStatusGet(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasIdStatusGet(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasIdStatusGetCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return StatusPropostaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusPropostaResponse propostasIdStatusGet(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        ApiResponse<StatusPropostaResponse> resp = propostasIdStatusGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
        return resp.getData();
    }

    /**
     * 
     * Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @return ApiResponse&lt;StatusPropostaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusPropostaResponse> propostasIdStatusGetWithHttpInfo(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista) throws ApiException {
        com.squareup.okhttp.Call call = propostasIdStatusGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, null, null);
        Type localVarReturnType = new TypeToken<StatusPropostaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     * @param id Identificador da proposta. (required)
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasIdStatusGetAsync(String id, String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, final ApiCallback<StatusPropostaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasIdStatusGetValidateBeforeCall(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusPropostaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for propostasPost
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param proposta Proposta a ser criada. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call propostasPostCall(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, Proposta proposta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = proposta;

        // create path and map variables
        String localVarPath = "/propostas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call propostasPostValidateBeforeCall(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, Proposta proposta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling propostasPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling propostasPost(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling propostasPost(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling propostasPost(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling propostasPost(Async)");
        }
        
        // verify the required parameter 'proposta' is set
        if (proposta == null) {
            throw new ApiException("Missing the required parameter 'proposta' when calling propostasPost(Async)");
        }
        

        com.squareup.okhttp.Call call = propostasPostCall(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param proposta Proposta a ser criada. (required)
     * @return InclusaoPropostaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InclusaoPropostaResponse propostasPost(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, Proposta proposta) throws ApiException {
        ApiResponse<InclusaoPropostaResponse> resp = propostasPostWithHttpInfo(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta);
        return resp.getData();
    }

    /**
     * 
     * Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param proposta Proposta a ser criada. (required)
     * @return ApiResponse&lt;InclusaoPropostaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InclusaoPropostaResponse> propostasPostWithHttpInfo(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, Proposta proposta) throws ApiException {
        com.squareup.okhttp.Call call = propostasPostValidateBeforeCall(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta, null, null);
        Type localVarReturnType = new TypeToken<InclusaoPropostaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param proposta Proposta a ser criada. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call propostasPostAsync(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, Proposta proposta, final ApiCallback<InclusaoPropostaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = propostasPostValidateBeforeCall(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InclusaoPropostaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
