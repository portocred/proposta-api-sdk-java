/*
 * Gestão de Propostas
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AlteracaoPropostaRequest;
import io.swagger.client.model.CpfDocumentoProposta;
import io.swagger.client.model.DocumentoProposta;
import io.swagger.client.model.Historico;
import io.swagger.client.model.InclusaoPropostaResponse;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.Oferta;
import io.swagger.client.model.Pendencia;
import io.swagger.client.model.Proposta;
import io.swagger.client.model.PropostaResponse;
import io.swagger.client.model.StatusPropostaResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropostaApi
 */
@Ignore
public class PropostaApiTest {

    private final PropostaApi api = new PropostaApi();

    
    /**
     * 
     *
     * Recuperação da lista de propostas vinculadas a um CPF.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasGetTest() throws ApiException {
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String cpf = null;
        List<PropostaResponse> response = api.propostasGet(clientId, accessToken, xAuthorization, cpf);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdClientesDocumentosPostTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        CpfDocumentoProposta documentacao = null;
        api.propostasIdClientesDocumentosPost(id, clientId, accessToken, documentacao);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdDocUploadUrlGetTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        InlineResponse200 response = api.propostasIdDocUploadUrlGet(id, clientId, accessToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdDocumentosGetTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        String tipoDocumento = null;
        List<DocumentoProposta> response = api.propostasIdDocumentosGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdGetTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        Proposta response = api.propostasIdGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Recuperação do histórico de atividades realizadas em uma proposta.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdHistoricosGetTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        List<Historico> response = api.propostasIdHistoricosGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Envio de mensagens para a mesa sobre a proposta em análise.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdMensagensPostTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        String mensagem = null;
        api.propostasIdMensagensPost(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdOfertasGetTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        List<Oferta> response = api.propostasIdOfertasGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Associa uma oferta a uma proposta.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdOfertasPostTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        String idOferta = null;
        api.propostasIdOfertasPost(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Recuperação da lista de pendências de uma proposta.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdPendenciasGetTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        List<Pendencia> response = api.propostasIdPendenciasGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdPutTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        AlteracaoPropostaRequest alteracaoPropostaRequest = null;
        api.propostasIdPut(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasIdStatusGetTest() throws ApiException {
        String id = null;
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        StatusPropostaResponse response = api.propostasIdStatusGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void propostasPostTest() throws ApiException {
        String clientId = null;
        String accessToken = null;
        byte[] xAuthorization = null;
        String codigoLoja = null;
        String codigoLojista = null;
        Proposta proposta = null;
        InclusaoPropostaResponse response = api.propostasPost(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta);

        // TODO: test validations
    }
    
}
